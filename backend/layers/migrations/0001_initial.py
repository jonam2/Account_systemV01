# Generated by Django 4.2.7 on 2025-10-15 18:54

from decimal import Decimal
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('role', models.CharField(choices=[('manager', 'Manager'), ('accountant', 'Accountant'), ('sales', 'Sales'), ('warehouse_manager', 'Warehouse Manager')], default='sales', max_length=20)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('department', models.CharField(blank=True, max_length=50)),
                ('salary', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('join_date', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('code', models.CharField(db_index=True, max_length=20, unique=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='layers.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'db_table': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('contact_type', models.CharField(choices=[('customer', 'Customer'), ('supplier', 'Supplier'), ('both', 'Both')], default='customer', max_length=10)),
                ('code', models.CharField(db_index=True, max_length=20, unique=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('mobile', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('state', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, default='Turkey', max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('tax_number', models.CharField(blank=True, max_length=50)),
                ('tax_office', models.CharField(blank=True, max_length=100)),
                ('currency', models.CharField(default='TRY', max_length=3)),
                ('payment_terms', models.CharField(choices=[('cash', 'Cash'), ('net_15', 'Net 15 Days'), ('net_30', 'Net 30 Days'), ('net_60', 'Net 60 Days'), ('net_90', 'Net 90 Days')], default='cash', max_length=10)),
                ('credit_limit', models.DecimalField(decimal_places=2, default=0, help_text='Maximum credit allowed', max_digits=15)),
                ('current_balance', models.DecimalField(decimal_places=2, default=0, help_text='Current account balance (+ receivable, - payable)', max_digits=15)),
                ('contact_person', models.CharField(blank=True, max_length=100)),
                ('contact_person_phone', models.CharField(blank=True, max_length=20)),
                ('contact_person_email', models.EmailField(blank=True, max_length=254)),
                ('notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contacts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'db_table': 'contacts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Indicates if the record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('invoice_number', models.CharField(db_index=True, help_text='Unique invoice number (auto-generated)', max_length=50, unique=True)),
                ('invoice_type', models.CharField(choices=[('SALES', 'Sales Invoice'), ('PURCHASE', 'Purchase Invoice')], db_index=True, max_length=20)),
                ('reference_number', models.CharField(blank=True, help_text='External reference number (PO number, etc.)', max_length=100, null=True)),
                ('invoice_date', models.DateField(db_index=True)),
                ('due_date', models.DateField(db_index=True)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('approved_date', models.DateTimeField(blank=True, null=True)),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 Days'), ('NET_30', 'Net 30 Days'), ('NET_45', 'Net 45 Days'), ('NET_60', 'Net 60 Days'), ('NET_90', 'Net 90 Days')], default='NET_30', max_length=20)),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('shipping_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('balance_due', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING', 'Pending'), ('APPROVED', 'Approved'), ('PAID', 'Paid'), ('PARTIALLY_PAID', 'Partially Paid'), ('CANCELLED', 'Cancelled'), ('OVERDUE', 'Overdue')], db_index=True, default='DRAFT', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('terms_and_conditions', models.TextField(blank=True, null=True)),
                ('is_recurring', models.BooleanField(default=False)),
                ('inventory_updated', models.BooleanField(default=False, help_text='Whether inventory has been updated for this invoice')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_invoices', to=settings.AUTH_USER_MODEL)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='layers.contact')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_invoices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'db_table': 'invoices',
                'ordering': ['-invoice_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('code', models.CharField(db_index=True, max_length=50, unique=True)),
                ('name', models.CharField(db_index=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('unit', models.CharField(choices=[('piece', 'Piece'), ('kg', 'Kilogram'), ('gram', 'Gram'), ('liter', 'Liter'), ('meter', 'Meter'), ('cm', 'Centimeter'), ('box', 'Box'), ('package', 'Package')], default='piece', max_length=20)),
                ('barcode', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('sku', models.CharField(blank=True, max_length=100)),
                ('sale_price', models.DecimalField(decimal_places=2, default=0, help_text='Selling price', max_digits=15)),
                ('cost_price', models.DecimalField(decimal_places=2, default=0, help_text='Cost/Purchase price', max_digits=15)),
                ('currency', models.CharField(default='TRY', max_length=3)),
                ('weight', models.DecimalField(blank=True, decimal_places=3, help_text='Weight in kg', max_digits=10, null=True)),
                ('length', models.DecimalField(blank=True, decimal_places=2, help_text='Length in cm', max_digits=10, null=True)),
                ('width', models.DecimalField(blank=True, decimal_places=2, help_text='Width in cm', max_digits=10, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='Height in cm', max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='layers.category')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('code', models.CharField(db_index=True, max_length=20, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, default='Turkey', max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('manager_name', models.CharField(blank=True, max_length=100)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False, help_text='Default warehouse for new transactions')),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Warehouse',
                'verbose_name_plural': 'Warehouses',
                'db_table': 'warehouses',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InvoicePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('payment_date', models.DateField(db_index=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('BANK_TRANSFER', 'Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('DEBIT_CARD', 'Debit Card'), ('CHECK', 'Check'), ('MOBILE_PAYMENT', 'Mobile Payment'), ('OTHER', 'Other')], max_length=20)),
                ('reference_number', models.CharField(blank=True, help_text='Check number, transaction ID, etc.', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='layers.invoice')),
                ('recorded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='recorded_payments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Invoice Payment',
                'verbose_name_plural': 'Invoice Payments',
                'db_table': 'invoice_payments',
                'ordering': ['-payment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Indicates if the record has been soft deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Timestamp when the record was soft deleted', null=True)),
                ('description', models.TextField(blank=True, help_text='Item description (auto-filled from product)')),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.001'))])),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('line_total', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15)),
                ('notes', models.TextField(blank=True, null=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='layers.invoice')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoice_items', to='layers.product')),
            ],
            options={
                'verbose_name': 'Invoice Item',
                'verbose_name_plural': 'Invoice Items',
                'db_table': 'invoice_items',
                'ordering': ['sort_order', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='invoice',
            name='warehouse',
            field=models.ForeignKey(help_text='Warehouse for inventory movements', on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='layers.warehouse'),
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('movement_type', models.CharField(choices=[('in', 'Stock In'), ('out', 'Stock Out'), ('transfer', 'Transfer'), ('adjustment', 'Adjustment'), ('production', 'Production'), ('return', 'Return')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Positive for IN, negative for OUT', max_digits=15)),
                ('quantity_before', models.DecimalField(decimal_places=3, default=0, max_digits=15)),
                ('quantity_after', models.DecimalField(decimal_places=3, default=0, max_digits=15)),
                ('reference_type', models.CharField(blank=True, help_text='invoice, order, production, etc.', max_length=50)),
                ('reference_id', models.IntegerField(blank=True, help_text='ID of related document', null=True)),
                ('reference_number', models.CharField(blank=True, help_text='Document number for reference', max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_movements', to=settings.AUTH_USER_MODEL)),
                ('from_warehouse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfers_out', to='layers.warehouse')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='layers.product')),
                ('to_warehouse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transfers_in', to='layers.warehouse')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='layers.warehouse')),
            ],
            options={
                'verbose_name': 'Stock Movement',
                'verbose_name_plural': 'Stock Movements',
                'db_table': 'stock_movements',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['warehouse', 'product'], name='stock_movem_warehou_fa82b1_idx'), models.Index(fields=['movement_type'], name='stock_movem_movemen_d922c9_idx'), models.Index(fields=['created_at'], name='stock_movem_created_07bdcc_idx'), models.Index(fields=['reference_type', 'reference_id'], name='stock_movem_referen_a0d8b9_idx')],
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the record was last updated')),
                ('quantity', models.DecimalField(decimal_places=3, default=0, help_text='Current stock quantity', max_digits=15)),
                ('reserved_quantity', models.DecimalField(decimal_places=3, default=0, help_text='Quantity reserved for orders', max_digits=15)),
                ('min_quantity', models.DecimalField(decimal_places=3, default=0, help_text='Minimum stock level (reorder point)', max_digits=15)),
                ('max_quantity', models.DecimalField(decimal_places=3, default=0, help_text='Maximum stock level', max_digits=15)),
                ('location', models.CharField(blank=True, help_text='Shelf/Bin location', max_length=100)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='layers.product')),
                ('warehouse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stocks', to='layers.warehouse')),
            ],
            options={
                'verbose_name': 'Stock',
                'verbose_name_plural': 'Stocks',
                'db_table': 'stocks',
                'ordering': ['warehouse', 'product'],
                'indexes': [models.Index(fields=['warehouse', 'product'], name='stocks_warehou_d27f09_idx'), models.Index(fields=['quantity'], name='stocks_quantit_bee17c_idx')],
                'unique_together': {('warehouse', 'product')},
            },
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['code'], name='products_code_770e3a_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['name'], name='products_name_6f9890_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['barcode'], name='products_barcode_d008ac_idx'),
        ),
        migrations.AddIndex(
            model_name='invoicepayment',
            index=models.Index(fields=['invoice', 'payment_date'], name='invoice_pay_invoice_c9751f_idx'),
        ),
        migrations.AddIndex(
            model_name='invoiceitem',
            index=models.Index(fields=['invoice', 'product'], name='invoice_ite_invoice_f05dd2_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['invoice_type', 'status'], name='invoices_invoice_e42ab9_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['contact', 'invoice_date'], name='invoices_contact_2da697_idx'),
        ),
        migrations.AddIndex(
            model_name='invoice',
            index=models.Index(fields=['due_date'], name='invoices_due_dat_039a25_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['contact_type', 'is_active'], name='contacts_contact_2efe99_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['code'], name='contacts_code_faab11_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['name'], name='contacts_name_084782_idx'),
        ),
    ]
